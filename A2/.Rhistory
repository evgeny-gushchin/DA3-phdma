sum(is.na(data$host_listings_count))
sum(is.na(data$host_total_listings_count))
summary(data$host_listings_count)
cor(data$host_listings_count[!is.na(data$host_listings_count)], data$host_total_listings_count[!is.na(data$host_total_listings_count)])
table(data$host_listings_count) #can be a p
# two variable are highly correlated between each other, we can use either of the two
# we can make this variable into factor and unite all observations with more than 9 listing into one group "10+"
# let the NA value become zero
data$host_listings_count[is.na(data$host_listings_count)] <- 0
data$host_is_superhost[data$host_listings_count > 9] <- 10
table(data$host_listings_count)
# two variable are highly correlated between each other, we can use either of the two
# we can make this variable into factor and unite all observations with more than 9 listing into one group "10+"
# let the NA value become zero
data$host_listings_count[is.na(data$host_listings_count)] <- 0
data$host_listings_count[data$host_listings_count > 9] <- 10
table(data$host_listings_count)
g8 <- ggplot(data, aes(x = factor(host_listings_count), y = price_numeric,
)) +
geom_boxplot(alpha=0.8, na.rm=T, outlier.shape = NA, width = 0.8) +
stat_boxplot(geom = "errorbar", width = 0.8, size = 0.3, na.rm=T)+
labs(x = "Host's listings count",y = "Apartment price")+
scale_y_continuous(expand = c(0.01,0.01), limits=c(0, 200), breaks = seq(0,200, 20))+
theme_minimal()
g8
print(data$host_verifications[2])
table(data$host_verifications)
print(data$host_has_profile_pic[2])
table(data$host_has_profile_pic)
# let's assume the missing value is also "f"
data$host_has_profile_pic[data$host_has_profile_pic == ""] <- "f"
table(data$host_has_profile_pic)
g9 <- ggplot(data, aes(x = factor(host_has_profile_pic), y = price_numeric,
)) +
geom_boxplot(alpha=0.8, na.rm=T, outlier.shape = NA, width = 0.8) +
stat_boxplot(geom = "errorbar", width = 0.8, size = 0.3, na.rm=T)+
labs(x = "Host has profile pic",y = "Apartment price")+
scale_y_continuous(expand = c(0.01,0.01), limits=c(0, 200), breaks = seq(0,200, 20))+
theme_minimal()
g9
print(data$host_identity_verified[2])
table(data$host_identity_verified)
table(data$host_identity_verified)
# again let's assume the missing value is also "f"
data$host_identity_verified[data$host_identity_verified == ""] <- "f"
g10 <- ggplot(data, aes(x = factor(host_identity_verified), y = price_numeric,
)) +
geom_boxplot(alpha=0.8, na.rm=T, outlier.shape = NA, width = 0.8) +
stat_boxplot(geom = "errorbar", width = 0.8, size = 0.3, na.rm=T)+
labs(x = "Host has verified identity",y = "Apartment price")+
scale_y_continuous(expand = c(0.01,0.01), limits=c(0, 200), breaks = seq(0,200, 20))+
theme_minimal()
g10
data %>% glimpse()
print(data$neighbourhood[2])
table(data$neighbourhood)
table(data$neighbourhood_cleansed)
g11 <- ggplot(data, aes(x = factor(neighbourhood_cleansed), y = price_numeric,
)) +
geom_boxplot(alpha=0.8, na.rm=T, outlier.shape = NA, width = 0.8) +
stat_boxplot(geom = "errorbar", width = 0.8, size = 0.3, na.rm=T)+
labs(x = "Neighbourhood",y = "Apartment price")+
scale_y_continuous(expand = c(0.01,0.01), limits=c(0, 200), breaks = seq(0,200, 20))+
theme_minimal()
g11
print(data$latitude[2])
# I don't think I need latitude and longitude as I already have neighbourhoods and I don't do the mapping
data <- data %>% select(-c(latitude, longitude))
data %>% glimpse()
table(data$property_type)
table(data$room_type)
table(data$room_type) # this variable was used for filtering
table(data$property_type)
g12 <- ggplot(data, aes(x = factor(property_type), y = price_numeric,
)) +
geom_boxplot(alpha=0.8, na.rm=T, outlier.shape = NA, width = 0.8) +
stat_boxplot(geom = "errorbar", width = 0.8, size = 0.3, na.rm=T)+
labs(x = "Property type",y = "Apartment price")+
scale_y_continuous(expand = c(0.01,0.01), limits=c(0, 200), breaks = seq(0,200, 20))+
theme_minimal()
g12
summary(data$accommodates)
g13 <- ggplot(data, aes(x = factor(accommodates), y = price_numeric,
)) +
geom_boxplot(alpha=0.8, na.rm=T, outlier.shape = NA, width = 0.8) +
stat_boxplot(geom = "errorbar", width = 0.8, size = 0.3, na.rm=T)+
labs(x = "How many people can live",y = "Apartment price")+
scale_y_continuous(expand = c(0.01,0.01), limits=c(0, 200), breaks = seq(0,200, 20))+
theme_minimal()
g13
print(data$bathrooms_text[2])
print(data$bathrooms_text[5])
print(data$bathrooms_text[35])
table(data$bathrooms_text)
g14 <- ggplot(data, aes(x = factor(bathrooms_text), y = price_numeric,
)) +
geom_boxplot(alpha=0.8, na.rm=T, outlier.shape = NA, width = 0.8) +
stat_boxplot(geom = "errorbar", width = 0.8, size = 0.3, na.rm=T)+
labs(x = "How many bathrooms",y = "Apartment price")+
scale_y_continuous(expand = c(0.01,0.01), limits=c(0, 200), breaks = seq(0,200, 20))+
theme_minimal()
g14
# bathrooms_text also important (can try making it continuous)
data <- data %>% mutate(bathroom = ifelse(bathrooms_text == "0 baths", 0,
ifelse(bathrooms_text == "1 bath", 1,
# bathrooms_text also important (can try making it continuous)
data <- data %>% mutate(bathroom = ifelse(bathrooms_text == "0 baths", 0,
ifelse(bathrooms_text == "Half-bath", 0.5,
ifelse(bathrooms_text == "1 bath", 1,
ifelse(bathrooms_text == "1.5 baths", 1.5,
ifelse(bathrooms_text == "2 baths", 2,
ifelse(bathrooms_text == "2.5 baths", 2.5,
ifelse(bathrooms_text == "3 baths", 3,3.5 )))))))))
table(data$bathroom)
# bathrooms_text also important (can try making it continuous)
data <- data %>% mutate(bathroom = ifelse(bathrooms_text == "0 baths", 0,
ifelse(bathrooms_text == "Half-bath", 0.5,
ifelse(bathrooms_text == "1 bath", 1,
ifelse(bathrooms_text == "1.5 baths", 1.5,
ifelse(bathrooms_text == "2 baths", 2,
ifelse(bathrooms_text == "2.5 baths", 2.5,
ifelse(bathrooms_text == "3 baths", 3,3.5 )))))))))
table(data$bathroom)
table(data$bathrooms_text)
table(data$bedrooms)
g15 <- ggplot(data, aes(x = factor(bedrooms), y = price_numeric,
)) +
geom_boxplot(alpha=0.8, na.rm=T, outlier.shape = NA, width = 0.8) +
stat_boxplot(geom = "errorbar", width = 0.8, size = 0.3, na.rm=T)+
labs(x = "How many bathrooms",y = "Apartment price")+
scale_y_continuous(expand = c(0.01,0.01), limits=c(0, 200), breaks = seq(0,200, 20))+
theme_minimal()
g15
table(data$bedrooms)
# lets regards NAs as zeros
data$bedrooms[is.na(data$bedrooms)] <- 0
g15 <- ggplot(data, aes(x = factor(bedrooms), y = price_numeric,
)) +
geom_boxplot(alpha=0.8, na.rm=T, outlier.shape = NA, width = 0.8) +
stat_boxplot(geom = "errorbar", width = 0.8, size = 0.3, na.rm=T)+
labs(x = "Bedrooms",y = "Apartment price")+
scale_y_continuous(expand = c(0.01,0.01), limits=c(0, 200), breaks = seq(0,200, 20))+
theme_minimal()
g15
table(data$beds)
g16 <- ggplot(data, aes(x = factor(beds), y = price_numeric,
)) +
geom_boxplot(alpha=0.8, na.rm=T, outlier.shape = NA, width = 0.8) +
stat_boxplot(geom = "errorbar", width = 0.8, size = 0.3, na.rm=T)+
labs(x = "Beds",y = "Apartment price")+
scale_y_continuous(expand = c(0.01,0.01), limits=c(0, 200), breaks = seq(0,200, 20))+
theme_minimal()
g16
# again lets regard NAs as zeros
data$beds[is.na(data$beds)] <- 0
g16 <- ggplot(data, aes(x = factor(beds), y = price_numeric,
)) +
geom_boxplot(alpha=0.8, na.rm=T, outlier.shape = NA, width = 0.8) +
stat_boxplot(geom = "errorbar", width = 0.8, size = 0.3, na.rm=T)+
labs(x = "Beds",y = "Apartment price")+
scale_y_continuous(expand = c(0.01,0.01), limits=c(0, 200), breaks = seq(0,200, 20))+
theme_minimal()
g16
cor(data$bedrooms,data$beds)
cor(data$accommodates,data$beds) # surprisingly not very correlated
cor(data$accommodates,data$bedrooms)
print(data$amenities[35])
print(data$amenities[5])
data$wifi <- ifelse(grepl("Wifi", data$amenities, ignore.case = TRUE), 1, 0)
table(data$wifi)
g17 <- ggplot(data, aes(x = factor(wifi), y = price_numeric,
)) +
geom_boxplot(alpha=0.8, na.rm=T, outlier.shape = NA, width = 0.8) +
stat_boxplot(geom = "errorbar", width = 0.8, size = 0.3, na.rm=T)+
labs(x = "Wifi",y = "Apartment price")+
scale_y_continuous(expand = c(0.01,0.01), limits=c(0, 200), breaks = seq(0,200, 20))+
theme_minimal()
g17
print(data$amenities[5])
print(data$amenities[1])
library(stringr)
#help of Chat GPT#
# Create new variable amenity_length
data$amenity_length <- str_count(data$amenities, ",")
# Since the count gives the number of commas, add 1 to get the total number of amenities
data$amenity_length <- data$amenity_length + 1
table(data$amenity_length)
g18 <- ggplot(data, aes(x = factor(amenity_length), y = price_numeric,
)) +
geom_boxplot(alpha=0.8, na.rm=T, outlier.shape = NA, width = 0.8) +
stat_boxplot(geom = "errorbar", width = 0.8, size = 0.3, na.rm=T)+
labs(x = "Number of amenities",y = "Apartment price")+
scale_y_continuous(expand = c(0.01,0.01), limits=c(0, 200), breaks = seq(0,200, 20))+
theme_minimal()
g18
data %>% glimpse()
print(data$minimum_nights[1])
print(data$minimum_nights[10])
print(data$minimum_nights[100])
print(data$maximum_nights[100])
table(data$maximum_nights)
table(data$minimum_nights)
g19 <- ggplot(data, aes(x = factor(minimum_nights), y = price_numeric,
)) +
geom_boxplot(alpha=0.8, na.rm=T, outlier.shape = NA, width = 0.8) +
stat_boxplot(geom = "errorbar", width = 0.8, size = 0.3, na.rm=T)+
labs(x = "Minimum nights",y = "Apartment price")+
scale_y_continuous(expand = c(0.01,0.01), limits=c(0, 200), breaks = seq(0,200, 20))+
theme_minimal()
g19
print(data$minimum_nights_avg_ntm[100])
table(data$minimum_nights_avg_ntm)
table(data$minimum_nights)
g19 <- ggplot(data, aes(x = factor(maximum_nights), y = price_numeric,
)) +
geom_boxplot(alpha=0.8, na.rm=T, outlier.shape = NA, width = 0.8) +
stat_boxplot(geom = "errorbar", width = 0.8, size = 0.3, na.rm=T)+
labs(x = "Maximum nights",y = "Apartment price")+
scale_y_continuous(expand = c(0.01,0.01), limits=c(0, 200), breaks = seq(0,200, 20))+
theme_minimal()
g19
print(data$minimum_minimum_nights[100])
#help of Chat GPT#
# Specify the variables for which you want to calculate correlations
selected_variables <- c(
"minimum_nights",
"maximum_nights",
"minimum_minimum_nights",
"maximum_minimum_nights",
"minimum_maximum_nights",
"maximum_maximum_nights",
"minimum_nights_avg_ntm",
"maximum_nights_avg_ntm"
)
# Extract the selected variables from the data frame
selected_data <- data[, selected_variables]
# Calculate pairwise correlations
correlation_matrix <- cor(selected_data)
# Print the correlation matrix
print(correlation_matrix)
# Print the correlation matrix
print(correlation_matrix)
#help of Chat GPT#
# Specify the variables for which you want to calculate correlations
selected_variables <- c(
"minimum_nights",
#"maximum_nights",
"minimum_minimum_nights",
"maximum_minimum_nights",
#"minimum_maximum_nights",
#"maximum_maximum_nights",
"minimum_nights_avg_ntm"#,
#"maximum_nights_avg_ntm"
)
# Extract the selected variables from the data frame
selected_data <- data[, selected_variables]
# Calculate pairwise correlations
correlation_matrix <- cor(selected_data)
# Print the correlation matrix
print(correlation_matrix)
# "maximum_maximum_nights" and "maximum_nights_avg_ntm" seem to match almost perfectly
# Extract the selected variables from the data frame
selected_data <- data[, selected_variables]
# Specify the variables for which you want to calculate correlations
selected_variables <- c(
"maximum_nights",
"minimum_maximum_nights",
"maximum_maximum_nights",
"maximum_nights_avg_ntm"
)
# "maximum_maximum_nights" and "maximum_nights_avg_ntm" seem to match almost perfectly
# Extract the selected variables from the data frame
selected_data <- data[, selected_variables]
# Calculate pairwise correlations
correlation_matrix2 <- cor(selected_data)
# Print the correlation matrix
print(correlation_matrix2)
table(data$has_availability)
g21 <- ggplot(data, aes(x = factor(has_availability), y = price_numeric,
)) +
geom_boxplot(alpha=0.8, na.rm=T, outlier.shape = NA, width = 0.8) +
stat_boxplot(geom = "errorbar", width = 0.8, size = 0.3, na.rm=T)+
labs(x = "Availability",y = "Apartment price")+
scale_y_continuous(expand = c(0.01,0.01), limits=c(0, 200), breaks = seq(0,200, 20))+
theme_minimal()
g21
table(data$availability_30)
g22 <- ggplot(data, aes(x = factor(availability_30), y = price_numeric,
)) +
geom_boxplot(alpha=0.8, na.rm=T, outlier.shape = NA, width = 0.8) +
stat_boxplot(geom = "errorbar", width = 0.8, size = 0.3, na.rm=T)+
labs(x = "Availability 30",y = "Apartment price")+
scale_y_continuous(expand = c(0.01,0.01), limits=c(0, 200), breaks = seq(0,200, 20))+
theme_minimal()
g22
table(data$availability_60)
g23 <- ggplot(data, aes(x = factor(availability_60), y = price_numeric,
)) +
geom_boxplot(alpha=0.8, na.rm=T, outlier.shape = NA, width = 0.8) +
stat_boxplot(geom = "errorbar", width = 0.8, size = 0.3, na.rm=T)+
labs(x = "Availability 60",y = "Apartment price")+
scale_y_continuous(expand = c(0.01,0.01), limits=c(0, 200), breaks = seq(0,200, 20))+
theme_minimal()
g23
# Print the result
print(na_proportion)
table(data$availability_365)
table(data$availability_90)
# Specify the variables for which you want to calculate correlations
selected_variables <- c(
"availability_30",
"availability_60",
"availability_90",
"availability_365"
)
# Extract the selected variables from the data frame
selected_data <- data[, selected_variables]
# Calculate pairwise correlations
correlation_matrix3 <- cor(selected_data)
# Print the correlation matrix
print(correlation_matrix3)
g24 <- ggplot(data, aes(x = factor(availability_365), y = price_numeric,
)) +
geom_boxplot(alpha=0.8, na.rm=T, outlier.shape = NA, width = 0.8) +
stat_boxplot(geom = "errorbar", width = 0.8, size = 0.3, na.rm=T)+
labs(x = "Availability 365",y = "Apartment price")+
scale_y_continuous(expand = c(0.01,0.01), limits=c(0, 200), breaks = seq(0,200, 20))+
theme_minimal()
g24
print(data$calendar_last_scraped[100])
table(data$calendar_last_scraped)
g25 <- ggplot(data, aes(x = factor(calendar_last_scraped), y = price_numeric,
)) +
geom_boxplot(alpha=0.8, na.rm=T, outlier.shape = NA, width = 0.8) +
stat_boxplot(geom = "errorbar", width = 0.8, size = 0.3, na.rm=T)+
labs(x = "Calendar last scraped",y = "Apartment price")+
scale_y_continuous(expand = c(0.01,0.01), limits=c(0, 200), breaks = seq(0,200, 20))+
theme_minimal()
g25
print(data$number_of_reviews[100])
table(data$number_of_reviews)
table(data$number_of_reviews)
g26 <- ggplot(data, aes(x = factor(number_of_reviews), y = price_numeric,
)) +
geom_boxplot(alpha=0.8, na.rm=T, outlier.shape = NA, width = 0.8) +
stat_boxplot(geom = "errorbar", width = 0.8, size = 0.3, na.rm=T)+
labs(x = "Number of reviews",y = "Apartment price")+
scale_y_continuous(expand = c(0.01,0.01), limits=c(0, 200), breaks = seq(0,200, 20))+
theme_minimal()
g26
g26 <- ggplot(data, aes(x=number_of_reviews, y=price_numeric)) +
geom_point(alpha=0.05)+ theme_minimal() +
labs(x = "Number of reviews",y = "Apartment price")+
scale_y_continuous(expand = c(0.01,0.01), limits=c(0, 200), breaks = seq(0,200, 20))
g26
cor(data$number_of_reviews, data$number_of_reviews_ltm)
cor(data$number_of_reviews, data$number_of_reviews_ltm, data$number_of_reviews_l30d)
# number_of_reviews seems very noisy
selected_data <- data[, c(number_of_reviews, number_of_reviews_ltm, number_of_reviews_l30d)]
cor(selected_data)
# number_of_reviews seems very noisy
selected_data <- data[, c(number_of_reviews, number_of_reviews_ltm, number_of_reviews_l30d)]
# number_of_reviews seems very noisy
selected_data <- data[, c("number_of_reviews", "number_of_reviews_ltm", "number_of_reviews_l30d")]
cor(selected_data)
g27 <- ggplot(data, aes(x=number_of_reviews_ltm, y=price_numeric)) +
geom_point(alpha=0.05)+ theme_minimal() +
labs(x = "Number of reviews in the last year",y = "Apartment price")+
scale_y_continuous(expand = c(0.01,0.01), limits=c(0, 200), breaks = seq(0,200, 20))
g27
g28 <- ggplot(data, aes(x=number_of_reviews_l30d, y=price_numeric)) +
geom_point(alpha=0.05)+ theme_minimal() +
labs(x = "Number of reviews in the last 30 days",y = "Apartment price")+
scale_y_continuous(expand = c(0.01,0.01), limits=c(0, 200), breaks = seq(0,200, 20))
g28
g28a <- ggplot(data, aes(x = factor(number_of_reviews_l30d), y = price_numeric,
)) +
geom_boxplot(alpha=0.8, na.rm=T, outlier.shape = NA, width = 0.8) +
stat_boxplot(geom = "errorbar", width = 0.8, size = 0.3, na.rm=T)+
labs(x = "Number of reviews in the last 30 days",y = "Apartment price")+
scale_y_continuous(expand = c(0.01,0.01), limits=c(0, 200), breaks = seq(0,200, 20))+
theme_minimal()
g28a
print(data$first_review[100])
data %>% glimpse()
# Convert text representations to date variables
data$last_scraped <- as.Date(data$last_scraped)
data$first_review <- as.Date(data$first_review)
data$last_review <- as.Date(data$last_review)
data %>% glimpse()
print(data$first_review[100])
data$last_scraped[100] - data$first_review[100]
data$days_since_first_review <- data$last_scraped - data$first_review
print(data$days_since_first_review[100])
table(data$days_since_first_review)
data$days_since_last_review <- data$last_scraped - data$last_review
table(data$days_since_last_review)
g29 <- ggplot(data, aes(x=days_since_first_review, y=price_numeric)) +
geom_point(alpha=0.05)+ theme_minimal() +
labs(x = "Days since first review",y = "Apartment price")+
scale_y_continuous(expand = c(0.01,0.01), limits=c(0, 200), breaks = seq(0,200, 20))
g29
cov(data$days_since_first_review, data$days_since_last_review)
as.numeric(data$days_since_first_review)
# Print the result
print(na_proportion)
sum(is.na(days_since_first_review))
sum(is.na(data$days_since_first_review))
sum(is.na(data$days_since_first_review))
sum(is.na(data$first_review))
sum(is.na(data$last_review))
summary(data$reviews_per_month)
sum(data$reviews_per_month == 0)
#cov(as.numeric(data$days_since_first_review), data$days_since_last_review)
g30 <- ggplot(data, aes(x=days_since_last_review, y=price_numeric)) +
geom_point(alpha=0.05)+ theme_minimal() +
labs(x = "Days since last review",y = "Apartment price")+
scale_y_continuous(expand = c(0.01,0.01), limits=c(0, 200), breaks = seq(0,200, 20))
g30
sum(is.na(data$calculated_host_listings_count_private_rooms))
table(data$calculated_host_listings_count_private_rooms)
table(data$calculated_host_listings_count_shared_rooms)
table(data$calculated_host_listings_count_entire_homes)
table(data$calculated_host_listings_count)
table(data$instant_bookable)
table(data$review_scores_accuracy)
table(data$review_scores_rating)
table(data$review_scores_value)
g31 <- ggplot(data, aes(x=review_scores_rating, y=price_numeric)) +
geom_point(alpha=0.05)+ theme_minimal() +
labs(x = "Review rating",y = "Apartment price")+
scale_y_continuous(expand = c(0.01,0.01), limits=c(0, 200), breaks = seq(0,200, 20))
g31
round(data$review_scores_rating[1],0)
g31a <- ggplot(data, aes(x = factor(round(data$review_scores_rating,1)), y = price_numeric,
)) +
geom_boxplot(alpha=0.8, na.rm=T, outlier.shape = NA, width = 0.8) +
stat_boxplot(geom = "errorbar", width = 0.8, size = 0.3, na.rm=T)+
labs(x = "Review rating",y = "Apartment price")+
scale_y_continuous(expand = c(0.01,0.01), limits=c(0, 200), breaks = seq(0,200, 20))+
theme_minimal()
g31a
g31a <- ggplot(data, aes(x = factor(round(data$review_scores_value,1)), y = price_numeric,
)) +
geom_boxplot(alpha=0.8, na.rm=T, outlier.shape = NA, width = 0.8) +
stat_boxplot(geom = "errorbar", width = 0.8, size = 0.3, na.rm=T)+
labs(x = "Review value",y = "Apartment price")+
scale_y_continuous(expand = c(0.01,0.01), limits=c(0, 200), breaks = seq(0,200, 20))+
theme_minimal()
g31a
g31 <- ggplot(data, aes(x=review_scores_rating, y=price_numeric)) +
geom_point(alpha=0.05)+ theme_minimal() +
labs(x = "Review rating",y = "Apartment price")+
scale_y_continuous(expand = c(0.01,0.01), limits=c(0, 200), breaks = seq(0,200, 20))
g31
g31a <- ggplot(data, aes(x = factor(round(data$review_scores_rating,1)), y = price_numeric,
)) +
geom_boxplot(alpha=0.8, na.rm=T, outlier.shape = NA, width = 0.8) +
stat_boxplot(geom = "errorbar", width = 0.8, size = 0.3, na.rm=T)+
labs(x = "Review rating",y = "Apartment price")+
scale_y_continuous(expand = c(0.01,0.01), limits=c(0, 200), breaks = seq(0,200, 20))+
theme_minimal()
g31a
table(data$review_scores_value)
g32 <- ggplot(data, aes(x=review_scores_value, y=price_numeric)) +
geom_point(alpha=0.05)+ theme_minimal() +
labs(x = "Review value",y = "Apartment price")+
scale_y_continuous(expand = c(0.01,0.01), limits=c(0, 200), breaks = seq(0,200, 20))
g32
g32a <- ggplot(data, aes(x = factor(round(data$review_scores_value,1)), y = price_numeric,
)) +
geom_boxplot(alpha=0.8, na.rm=T, outlier.shape = NA, width = 0.8) +
stat_boxplot(geom = "errorbar", width = 0.8, size = 0.3, na.rm=T)+
labs(x = "Review value",y = "Apartment price")+
scale_y_continuous(expand = c(0.01,0.01), limits=c(0, 200), breaks = seq(0,200, 20))+
theme_minimal()
g32a
# Specify the variables for which you want to calculate correlations
selected_variables <- c(
"review_scores_rating",
"review_scores_accuracy",
"review_scores_cleanliness",
"review_scores_checkin",
"review_scores_communication",
"review_scores_location",
"review_scores_value"
)
# Extract the selected variables from the data frame
selected_data <- data[, selected_variables]
# Calculate pairwise correlations
correlation_matrix4 <- cor(selected_data)
# Print the correlation matrix
print(correlation_matrix4)
table(data$instant_bookable)
selected_data <- selected_data[!is.na(selected_data)]
# Calculate pairwise correlations
correlation_matrix4 <- cor(selected_data)
# Extract the selected variables from the data frame
selected_data <- data[, selected_variables]
selected_data <- selected_data[!is.na(review_scores_rating)]
# Extract the selected variables from the data frame
selected_data <- data[, selected_variables]
selected_data <- selected_data[!is.na(data$review_scores_rating)]
round(data$review_scores_rating[1],0)
!is.na(selected_data)
dim(!is.na(selected_data))
dim(selected_data)
# Extract the selected variables from the data frame
selected_data <- data[, selected_variables]
dim(selected_data)
selected_data <- selected_data[!is.na(selected_data)]
dim(selected_data)
